{"ast":null,"code":"const API_URL = 'http://localhost:3001/tasks';\nexport const getTasks = async () => {\n  const res = await fetch(API_URL);\n  const data = await res.json();\n  return data;\n};\nexport const addTask = async task => {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  });\n  return await res.json();\n};\nexport const deleteTask = async id => {\n  await fetch(`${API_URL}/${id}`, {\n    method: 'DELETE'\n  });\n};\nexport const updateTask = async (id, data) => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"PATCH failed:\", response.status, errorText);\n    throw new Error(`Update failed: ${response.status}`);\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_URL","getTasks","res","fetch","data","json","addTask","task","method","headers","body","JSON","stringify","deleteTask","id","updateTask","response","ok","errorText","text","console","error","status","Error"],"sources":["/Users/lukebloomfield/mini-task-manager/src/src/utils/api.ts"],"sourcesContent":["import { Task } from '../types/Task';\n\nconst API_URL = 'http://localhost:3001/tasks';\n\nexport const getTasks = async () => {\n  const res = await fetch(API_URL);\n  const data = await res.json();\n  return data;\n};\n\nexport const addTask = async (task: Omit<Task, 'id'>) => {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(task),\n  });\n  return await res.json();\n};\n\nexport const deleteTask = async (id: number) => {\n  await fetch(`${API_URL}/${id}`, { method: 'DELETE' });\n};\n\nexport const updateTask = async (id: number, data: Partial<Task>) => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"PATCH failed:\", response.status, errorText);\n    throw new Error(`Update failed: ${response.status}`);\n  }\n\n  return await response.json();\n};\n\n\n\n"],"mappings":"AAEA,MAAMA,OAAO,GAAG,6BAA6B;AAE7C,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,OAAO,CAAC;EAChC,MAAMI,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EAC7B,OAAOD,IAAI;AACb,CAAC;AAED,OAAO,MAAME,OAAO,GAAG,MAAOC,IAAsB,IAAK;EACvD,MAAML,GAAG,GAAG,MAAMC,KAAK,CAACH,OAAO,EAAE;IAC/BQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;EACF,OAAO,MAAML,GAAG,CAACG,IAAI,CAAC,CAAC;AACzB,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAOC,EAAU,IAAK;EAC9C,MAAMX,KAAK,CAAC,GAAGH,OAAO,IAAIc,EAAE,EAAE,EAAE;IAAEN,MAAM,EAAE;EAAS,CAAC,CAAC;AACvD,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,MAAAA,CAAOD,EAAU,EAAEV,IAAmB,KAAK;EACnE,MAAMY,QAAQ,GAAG,MAAMb,KAAK,CAAC,GAAGH,OAAO,IAAIc,EAAE,EAAE,EAAE;IAC/CN,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACY,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvCC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEL,QAAQ,CAACM,MAAM,EAAEJ,SAAS,CAAC;IAC1D,MAAM,IAAIK,KAAK,CAAC,kBAAkBP,QAAQ,CAACM,MAAM,EAAE,CAAC;EACtD;EAEA,OAAO,MAAMN,QAAQ,CAACX,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}