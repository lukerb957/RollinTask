{"ast":null,"code":"var _jsxFileName = \"/Users/lukebloomfield/mini-task-manager/src/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getTasks, addTask, deleteTask, updateTask } from './utils/api';\n// import TaskList from './components/TaskList';\n// import AddTaskForm from './components/AddTaskForm';\n// import FilterBar from './components/FilterBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState({\n    from: '',\n    to: ''\n  });\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    const res = await getTasks();\n    setTasks(res.data);\n  };\n  const handleAdd = async title => {\n    const newTask = {\n      title,\n      completed: false,\n      createdAt: new Date().toISOString()\n    };\n    await addTask(newTask);\n    fetchTasks();\n  };\n  const handleDelete = async id => {\n    await deleteTask(id);\n    fetchTasks();\n  };\n  const handleComplete = async id => {\n    await updateTask(id, {\n      completed: true\n    });\n    fetchTasks();\n  };\n  const filteredTasks = tasks.filter(task => {\n    const createdDate = new Date(task.createdAt);\n    const fromDate = filter.from ? new Date(filter.from) : null;\n    const toDate = filter.to ? new Date(filter.to) : null;\n    return (!fromDate || createdDate >= fromDate) && (!toDate || createdDate <= toDate);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"AwMnI2D1Q1vsDb66m+6VX3hEZXg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","getTasks","addTask","deleteTask","updateTask","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","from","to","fetchTasks","res","data","handleAdd","title","newTask","completed","createdAt","Date","toISOString","handleDelete","id","handleComplete","filteredTasks","task","createdDate","fromDate","toDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lukebloomfield/mini-task-manager/src/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Task } from './types/Task';\nimport { getTasks, addTask, deleteTask, updateTask } from './utils/api';\n// import TaskList from './components/TaskList';\n// import AddTaskForm from './components/AddTaskForm';\n// import FilterBar from './components/FilterBar';\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filter, setFilter] = useState({ from: '', to: '' });\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await getTasks();\n    setTasks(res.data);\n  };\n\n  const handleAdd = async (title: string) => {\n    const newTask = { title, completed: false, createdAt: new Date().toISOString() };\n    await addTask(newTask);\n    fetchTasks();\n  };\n\n  const handleDelete = async (id: number) => {\n    await deleteTask(id);\n    fetchTasks();\n  };\n\n  const handleComplete = async (id: number) => {\n    await updateTask(id, { completed: true });\n    fetchTasks();\n  };\n\n  const filteredTasks = tasks.filter(task => {\n    const createdDate = new Date(task.createdAt);\n    const fromDate = filter.from ? new Date(filter.from) : null;\n    const toDate = filter.to ? new Date(filter.to) : null;\n\n    return (!fromDate || createdDate >= fromDate) &&\n           (!toDate || createdDate <= toDate);\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Task Manager</h1>\n      {/* <AddTaskForm onAdd={handleAdd} />\n      <FilterBar filter={filter} setFilter={setFilter} />\n      <TaskList tasks={filteredTasks} onDelete={handleDelete} onComplete={handleComplete} /> */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,QAAQ,EAAEC,OAAO,EAAEC,UAAU,EAAEC,UAAU,QAAQ,aAAa;AACvE;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC;IAAEa,IAAI,EAAE,EAAE;IAAEC,EAAE,EAAE;EAAG,CAAC,CAAC;EAE1Df,SAAS,CAAC,MAAM;IACdgB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,GAAG,GAAG,MAAMf,QAAQ,CAAC,CAAC;IAC5BS,QAAQ,CAACM,GAAG,CAACC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMC,SAAS,GAAG,MAAOC,KAAa,IAAK;IACzC,MAAMC,OAAO,GAAG;MAAED,KAAK;MAAEE,SAAS,EAAE,KAAK;MAAEC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAAE,CAAC;IAChF,MAAMtB,OAAO,CAACkB,OAAO,CAAC;IACtBL,UAAU,CAAC,CAAC;EACd,CAAC;EAED,MAAMU,YAAY,GAAG,MAAOC,EAAU,IAAK;IACzC,MAAMvB,UAAU,CAACuB,EAAE,CAAC;IACpBX,UAAU,CAAC,CAAC;EACd,CAAC;EAED,MAAMY,cAAc,GAAG,MAAOD,EAAU,IAAK;IAC3C,MAAMtB,UAAU,CAACsB,EAAE,EAAE;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC;IACzCN,UAAU,CAAC,CAAC;EACd,CAAC;EAED,MAAMa,aAAa,GAAGnB,KAAK,CAACE,MAAM,CAACkB,IAAI,IAAI;IACzC,MAAMC,WAAW,GAAG,IAAIP,IAAI,CAACM,IAAI,CAACP,SAAS,CAAC;IAC5C,MAAMS,QAAQ,GAAGpB,MAAM,CAACE,IAAI,GAAG,IAAIU,IAAI,CAACZ,MAAM,CAACE,IAAI,CAAC,GAAG,IAAI;IAC3D,MAAMmB,MAAM,GAAGrB,MAAM,CAACG,EAAE,GAAG,IAAIS,IAAI,CAACZ,MAAM,CAACG,EAAE,CAAC,GAAG,IAAI;IAErD,OAAO,CAAC,CAACiB,QAAQ,IAAID,WAAW,IAAIC,QAAQ,MACpC,CAACC,MAAM,IAAIF,WAAW,IAAIE,MAAM,CAAC;EAC3C,CAAC,CAAC;EAEF,oBACE1B,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB5B,OAAA;MAAA4B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIlB,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA9CID,GAAa;AAAAgC,EAAA,GAAbhC,GAAa;AAgDnB,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}